// 1.在浏览器中缓存
// 2.定义执行的上下文
// 3.删除未使用的JavaScript
// 4.避免使用太多内存
// 5.推迟不必要的js加载
// 6.避免内存泄漏
// 7.适当的使用web worker
// 8.将DOM元素保存在局部变量中
// 9.优先访问局部变量 需要在每个变量之前加上 let 或 const，以便定义当前作用域，防止查找并加速代码执行。
// 10.避免使用全局变量
// 11.实施一些优化方案
//    始终使用计算复杂度低的算法和最佳的数据来解决任务
//    重写算法以获得相同的结果和更少的计算
//    避免递归调用
//    给重复的函数加入变量，计算和调用
//    分解和简化数学公式
//    使用搜索数组：用他们来哦获取给予另一个的值而不是使用switch/case语句
//    使条件总是更有可能威震，以便更好地利用处理器的推测执行
//    如果可以使用危机运算符天魂某些操作，因为这些运算符的处理周期较短
// 12.使用工具检测问题
// 更多工具查看